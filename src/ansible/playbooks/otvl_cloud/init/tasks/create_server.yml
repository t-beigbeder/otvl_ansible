---
# included tasks file for otvl_cloud/init

- openstack.cloud.server_info:
    cloud: "{{ cloud_name }}"
    filters:
      metadata:
        hostname: "{{ item.value.name }}"
  register: os_server_info

- name: "Debugging os_server_info about the {{ item.key }} server {{ item.value.name }} on openstack"
  debug:
    var: os_server_info
  when: combined_infra.debug

- name: "Create the {{ item.key }} server {{ item.value.name }} key_name {{ combined_infra.key_name }}"
  os_server:
    cloud: "{{ cloud_name }}"
    state: present
    flavor: "{{ item.value.flavor }}"
    name: "{{ item.value.name }}"
    image: "{{ combined_infra.image_name }}"
    key_name: "{{ combined_infra.key_name }}"
    wait: yes
    nics: net-name={{ combined_infra.networks.external.name }}
    security_groups:
    - "{{ combined_infra.security_groups.cloud_init_access }}"
    - "{{ combined_infra.security_groups.ext_access }}"
    userdata: |
      #cloud-config
      write_files:
      - content: |
          #!/bin/sh
          logger -t  otvl_display_net_conf -s "command $0 is starting"
          echo "otvl_display_net_conf `date`": command $0 is starting > /dev/console
          cat /etc/network/interfaces > /tmp/tf.$$
          ls -l /etc/network/interfaces.d/50-cloud-init.cfg >> /tmp/tf.$$
          rm -f /etc/network/interfaces.d/50-cloud-init.cfg
          ip ad show >> /tmp/tf.$$
          ip route show >> /tmp/tf.$$
          logger -t  otvl_display_net_conf -s -f /tmp/tf.$$
          cat /tmp/tf.$$ | sed -e "s/^/otvl_display_net_conf `date` /" > /dev/console
          rm /tmp/tf.$$
          logger -t  otvl_display_net_conf -s "command $0 is exiting"
          echo "otvl_display_net_conf `date`": command $0 is exiting > /dev/console
          exit 0
        path: /root/bin/otvl_display_net_conf.sh
        owner: root:root
        permissions: '0750'
      - content: |
          [Unit]
          Description=Display network configuration at startup

          [Service]
          Type=oneshot
          ExecStart=/root/bin/otvl_display_net_conf.sh

          [Install]
          WantedBy=multi-user.target
        path: /etc/systemd/system/otvl_display_net_conf.service
      - content: |
          import sys
          import pyudev
          context = pyudev.Context()
          for device in context.list_devices():
              sys.stderr.write("otvl_cloud_init_py_check: listing {0}\n".format(device))
        path: /root/otvl_cloud_init_py_check.py
      - content: |
          #!/bin/sh
          echo `date`: command $0 is starting
          systemctl enable /etc/systemd/system/otvl_display_net_conf.service
          apt-get update && apt-get install -y --no-install-recommends virtualenv libudev1
          virtualenv -p python3 /srv/venv/otvl_cloud_init
          /srv/venv/otvl_cloud_init/bin/pip install pyudev
          /srv/venv/otvl_cloud_init/bin/python /root/otvl_cloud_init_py_check.py || exit 1
          tmp=`ip -4 -o address show | grep -v ' lo '`
          external_ip=`echo $tmp | cut -d' ' -f4 | cut -d/ -f1`
          nic_dev=`echo $tmp | cut -d' ' -f2`
          rm -f /etc/network/interfaces.d/50-cloud-init.cfg

          cat > /etc/network/interfaces <<EOF
          # This file describes the network interfaces available on your system
          # and how to activate them. For more information, see interfaces(5).

          source /etc/network/interfaces.d/*

          # The loopback network interface
          auto lo
          iface lo inet loopback

          # The primary network interface
          allow-hotplug $nic_dev
          iface $nic_dev inet dhcp
          EOF
          
          # routes only configured for IPV4, use it
          sed -i -e 's=#precedence ::ffff:0:0/96  100=precedence ::ffff:0:0/96  100=' /etc/gai.conf
          
          echo `date`: command $0 is exiting
          echo `date`: reboot
          reboot
          exit 0
        path: /root/bin/otvl_cloud_init.sh
        owner: root:root
        permissions: '0750'
      runcmd:
      - [ /root/bin/otvl_cloud_init.sh ]
    meta:
      hostname: "{{ item.value.name }}"
      logical_name: "{{ item.key }}"
      groups: "{{ item.value.groups }}"
  ignore_errors: yes
  register:
    otvl_os_server

- openstack.cloud.server_info:
    cloud: "{{ cloud_name }}"
    filters:
      metadata:
        hostname: "{{ item.value.name }}"
  register: os_server_info

- name: "Debugging os_server_info about the {{ item.key }} server {{ item.value.name }} on openstack # 2"
  debug:
    var: os_server_info
  when: combined_infra.debug

- name: "Handle os_server errors for the {{ item.key }} server {{ item.value.name }}"
  os_server:
    cloud: "{{ cloud_name }}"
    state: absent
    name: "{{ item.value.name }}"
  when:
  - '(otvl_os_server.extra_data.vm_state is defined and otvl_os_server.extra_data.vm_state|regex_search("error", ignorecase=True)) or (otvl_os_server.msg is defined and otvl_os_server.msg|regex_search("error", ignorecase=True))'

- openstack.cloud.server_info:
    cloud: "{{ cloud_name }}"
    filters:
      metadata:
        hostname: "{{ item.value.name }}"
  register: os_server_info
  when: otvl_os_server.changed

- name: "Debugging os_server_info about the {{ item.key }} server {{ item.value.name }} on openstack # 3"
  debug:
    var: os_server_info
  when: combined_infra.debug

- name: "Populate otvl_iaas_ip fact for the {{ item.key }} server {{ item.value.name }} with the public IP {{ os_server_info.openstack_servers[0].interface_ip }}"
  block:
    - name: "Set otvl_iaas_ip fact for the {{ item.key }} server {{ item.value.name }} with the public IP {{ os_server_info.openstack_servers[0].interface_ip }}"
      set_fact:
        otvl_iaas_ip: "{{ otvl_iaas_ip | default({}) | combine( {item.key: os_server_info.openstack_servers[0].interface_ip} ) }}"
    - name: "Force notify otvl_iaas_ip fact for the {{ item.key }} server {{ item.value.name }} with the public IP {{ os_server_info.openstack_servers[0].interface_ip }}"
      command: /bin/true
      notify:
        - wait_for_otvl_iaas_ip

  when: otvl_os_server.changed

###