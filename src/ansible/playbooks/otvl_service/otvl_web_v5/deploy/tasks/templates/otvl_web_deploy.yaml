apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ current_site_item.name }}-api-cmap
data:
  "cabri-sfile.yaml": |
    synchronize:
      period: 60
      actions:
        - type: cmd
          base:
            verbose: false
            dispOut: false
            dispErr: false
          cmdLine: cabri cli --pfile /etc/cabri-pfile sync ${OTVL_WEB_CABRI_SYNC_REMOTE_CT} fsy:/data/content@ -rv --summary --noacl
  "run-cabri-scheduler.sh": |
    echo /usr/local/bin/cabri cli --pfile /etc/cabri-pfile config --put WebBasicAuth $OTVL_WEB_CABRI_SYNC_WEB_USER '<hidden>'
    /usr/local/bin/cabri cli --pfile /etc/cabri-pfile config --put WebBasicAuth $OTVL_WEB_CABRI_SYNC_WEB_USER $OTVL_WEB_CABRI_SYNC_WEB_PASSWORD
    if [ $? -ne 0 ] ; then exit 1 ; fi
    mkdir -p /data/config /data/content
    echo /usr/local/bin/cabri cli --pfile /etc/cabri-pfile sync ${OTVL_WEB_CABRI_SYNC_REMOTE_CF} fsy:/data/config@ -rv --summary --noacl
    /usr/local/bin/cabri cli --pfile /etc/cabri-pfile sync ${OTVL_WEB_CABRI_SYNC_REMOTE_CF} fsy:/data/config@ -rv --summary --noacl
    if [ $? -ne 0 ] ; then exit 1 ; fi
    ln -s /data/content /data/config/content
    echo /usr/local/bin/cabri schedule --pfile /etc/cabri-pfile --sfile /etc/api-cmap/cabri-sfile.yaml
    /usr/local/bin/cabri schedule --pfile /etc/cabri-pfile --sfile /etc/api-cmap/cabri-sfile.yaml

---
apiVersion: v1
kind: Pod
metadata:
  name: {{ current_site_item.name }}-api
  labels:
    app.kubernetes.io/name: {{ current_site_item.name }}-api
spec:
  securityContext:
    runAsUser: {{ current_site_item.uid }}
    runAsGroup: {{ current_site_item.uid }}
    fsGroup: {{ current_site_item.fs_group }}
  containers:
  - name: sync
    image: "{{ combined_otvl.cabri.sched_image }}"
    env:
      - name: OTVL_WEB_CABRI_SYNC_WEB_USER
        value: "{{ combined_otvl.cabri.webapi_user }}"
      - name: OTVL_WEB_CABRI_SYNC_WEB_PASSWORD
        value: "{{ combined_otvl.cabri.webapi_password }}"
      - name: OTVL_WEB_CABRI_SYNC_REMOTE_CF
        value: "{{ current_site_item.rca.dss }}@{{ current_site_item.rca.config }}"
      - name: OTVL_WEB_CABRI_SYNC_REMOTE_CT
        value: "{{ current_site_item.rca.dss }}@{{ current_site_item.rca.content }}"
    command: ["/bin/sh"]
    args: ["-c", "/entrypoint.sh /bin/sh /etc/api-cmap/run-cabri-scheduler.sh"]
    volumeMounts:
    - name: "api-vol"
      mountPath: /data
    - name: api-cmap
      mountPath: /etc/api-cmap
  - name: api
    image: "{{ current_site_item.images.api }}"
    env:
    - name: OTVL_WEB_CONFIG_PATH
      value: /data/config/config.yml
    command: ["/bin/sh"]
    args: ["-c", "/entrypoint.sh /srv/pkg/otvl_web_server_venv/bin/python -m otvl_web.main"]
    ports:
    - containerPort: {{ current_site_item.api_port }}
    volumeMounts:
    - name: "api-vol"
      mountPath: /data

  volumes:
  - name: "api-vol"
    persistentVolumeClaim:
      claimName: "{{ current_site_item.name }}-api-pvc"
  - name: "api-cmap"
    configMap:
      name: "{{ current_site_item.name }}-api-cmap"

  restartPolicy: OnFailure

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ current_site_item.name }}-api"
spec:
  selector:
    app.kubernetes.io/name: {{ current_site_item.name }}-api
  ports:
    - name: "api-port"
      port: {{ current_site_item.api_port }}
      protocol: TCP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ current_site_item.name }}-app-cmap
data:
  "cabri-sfile.yaml": |
    synchronize:
      period: 60
      actions:
        - type: cmd
          base:
            verbose: false
            dispOut: false
            dispErr: false
          cmdLine: cabri cli --pfile /etc/cabri-pfile sync ${OTVL_WEB_CABRI_SYNC_REMOTE} fsy:/data/assets@ -rv --summary --noacl
  "run-cabri-scheduler.sh": |
    echo /usr/local/bin/cabri cli --pfile /etc/cabri-pfile config --put WebBasicAuth $OTVL_WEB_CABRI_SYNC_WEB_USER '<hidden>'
    /usr/local/bin/cabri cli --pfile /etc/cabri-pfile config --put WebBasicAuth $OTVL_WEB_CABRI_SYNC_WEB_USER $OTVL_WEB_CABRI_SYNC_WEB_PASSWORD
    if [ $? -ne 0 ] ; then exit 1 ; fi
    mkdir -p /data/assets
    echo /usr/local/bin/cabri schedule --pfile /etc/cabri-pfile --sfile /etc/app-cmap/cabri-sfile.yaml
    /usr/local/bin/cabri schedule --pfile /etc/cabri-pfile --sfile /etc/app-cmap/cabri-sfile.yaml

---
apiVersion: v1
kind: Pod
metadata:
  name: {{ current_site_item.name }}-app
  labels:
    app.kubernetes.io/name: {{ current_site_item.name }}-app
spec:
  securityContext:
    runAsUser: {{ current_site_item.uid }}
    runAsGroup: {{ current_site_item.uid }}
    fsGroup: {{ current_site_item.fs_group }}
  containers:
    - name: sync
      image: "{{ combined_otvl.cabri.sched_image }}"
      env:
        - name: OTVL_WEB_CABRI_SYNC_WEB_USER
          value: "{{ combined_otvl.cabri.webapi_user }}"
        - name: OTVL_WEB_CABRI_SYNC_WEB_PASSWORD
          value: "{{ combined_otvl.cabri.webapi_password }}"
        - name: OTVL_WEB_CABRI_SYNC_REMOTE
          value: "{{ current_site_item.rca.dss }}@{{ current_site_item.rca.assets }}"
      command: ["/bin/sh"]
      args: ["-c", "/entrypoint.sh /bin/sh /etc/app-cmap/run-cabri-scheduler.sh"]
      volumeMounts:
        - name: "app-vol"
          mountPath: /data
        - name: app-cmap
          mountPath: /etc/app-cmap
    - name: app
      image: "{{ current_site_item.images.app }}"
      env:
        - name: OTVL_WEB_SERVER_NAME
          value: "{{ current_site_item.ingress_host }}"
        - name: OTVL_WEB_ENABLE_BOTS
          value: "{{ (current_site_item.enable_bots|default(false)) | ternary('1', '', '') }}"
        - name: OTVL_WEB_ASSETS_DIR
          value: /data/assets
      command: ["/bin/sh"]
      args: ["-c", "/entrypoint.sh /shell/httpd-foreground.sh"]
      ports:
        - containerPort: {{ current_site_item.app_port }}
      volumeMounts:
        - name: "app-vol"
          mountPath: /data

  volumes:
    - name: "app-vol"
      persistentVolumeClaim:
        claimName: "{{ current_site_item.name }}-app-pvc"
    - name: "app-cmap"
      configMap:
        name: "{{ current_site_item.name }}-app-cmap"

  restartPolicy: OnFailure

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ current_site_item.name }}-app"
spec:
  selector:
    app.kubernetes.io/name: {{ current_site_item.name }}-app
  ports:
      - name: "app-port"
        port: {{ current_site_item.app_port }}
        protocol: TCP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ current_site_item.name }}-router
data:
  "static-config.yml": |
    log:
      level: INFO
    accessLog: {}
    providers:
      file:
        filename: /traefik/dynamic-conf.yml
        watch: true
    entryPoints:
      web:
        address: ':8080'
  "dynamic-conf.yml": |
    http:
      routers:
    
        to-api-private:
          rule: "Path(`/api/v2/content/private{n:.*}`,`/api/v2/content/prive{n:.*}`,`/api/v2/html/private{n:.*}`,`/api/v2/html/prive{n:.*}`)"
          middlewares:
            - private-basic-auth
          service: api
    
        to-api-sitemap:
          rule: "Path(`/sitemap.xml`)"
          middlewares:
            - add-api
          service: api
    
        to-api:
          rule: "PathPrefix(`/api/`)"
          service: api
    
        to-nobot:
          rule: "(PathPrefix(`/assets/`) || Path(`/favicon.ico`,`/robots.txt`))"
          priority: 5
          service: app
    
        to-api-html-private:
          rule: "Path(`/private{n:.*}`,`/prive{n:.*}`) && HeadersRegexp(`User-Agent`, `(otvl_begin|Googlebot|Bingbot|bingbot|BingPreview|YandexWebmaster|YandexBot|LinkedInBot|PocketParser|Slurp|Baiduspider|Sogou|Exabot|facebot|facebookexternalhit|ia_archiver|DuckDuckBot|WhatsApp|Twitterbot|Applebot|AhrefsBot|PaperLiBot|otvl_end)`)"
          priority: 4
          middlewares:
            - "private-basic-auth"
            - "add-api-html"
          service: api
    
        to-api-html:
          rule: "HeadersRegexp(`User-Agent`, `(otvl_begin|Googlebot|Bingbot|bingbot|BingPreview|YandexWebmaster|YandexBot|LinkedInBot|PocketParser|Slurp|Baiduspider|Sogou|Exabot|facebot|facebookexternalhit|ia_archiver|DuckDuckBot|WhatsApp|Twitterbot|Applebot|AhrefsBot|PaperLiBot|otvl_end)`)"
          priority: 3
          middlewares:
            - "add-api-html"
          service: api
    
        to-private:
          rule: "Path(`/private{n:.*}`,`/prive{n:.*}`)"
          priority: 2
          middlewares:
            - "private-basic-auth"
          service: app
    
        to-app:
          rule: "PathPrefix(`/`)"
          priority: 1
          service: app
    
      middlewares:
        "add-api":
          addPrefix:
            prefix: "/api/v2"
    
        "add-api-html":
          addPrefix:
            prefix: "/api/v2/html"
    
        "private-basic-auth":
          basicAuth:
            users:
              - "qigonggo:$apr1$BZ3stzt5$FlYaD1Nt37KqjddDbpNaQ."
    
      services:
        "app":
          loadBalancer:
            servers:
              - url: "http://{{ current_site_item.name }}-app:{{ current_site_item.app_port }}"
    
        "api":
          loadBalancer:
            servers:
              - url: "http://{{ current_site_item.name }}-api:{{ current_site_item.api_port }}"

---
apiVersion: v1
kind: Pod
metadata:
  name: {{ current_site_item.name }}-router
  labels:
    app.kubernetes.io/name: {{ current_site_item.name }}-router
spec:
  securityContext:
    runAsUser: {{ current_site_item.uid }}
    runAsGroup: {{ current_site_item.uid }}
  containers:
    - name: {{ current_site_item.name }}-router
      image: "{{ combined_otvl.traefik.image }}"
      command: ["/usr/local/bin/traefik"]
      args: ["--configFile=/traefik/static-config.yml"]
      ports:
        - containerPort: {{ combined_otvl.otvl_web_v5.router_port }}
      volumeMounts:
        - name: "config-vol"
          mountPath: /traefik
  volumes:
    - name: config-vol
      configMap:
        name: "{{ current_site_item.name }}-router"

  restartPolicy: OnFailure

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ current_site_item.name }}-router"
spec:
  selector:
    app.kubernetes.io/name: {{ current_site_item.name }}-router
  ports:
  - name: "router-port"
    port: {{ combined_otvl.otvl_web_v5.router_port }}
    protocol: TCP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ current_site_item.name }}-router"
spec:
  rules:
    - host: "{{ current_site_item.ingress_host }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name:  "{{ current_site_item.name }}-router"
                port:
                  number: {{ combined_otvl.otvl_web_v5.router_port }}
