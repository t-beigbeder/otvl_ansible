apiVersion: v1
kind: Pod
metadata:
  name: {{ current_site_item.name }}-papi
  labels:
    app.kubernetes.io/name: {{ current_site_item.name }}-lapi
spec:
  securityContext:
    runAsUser: {{ current_site_item.uid }}
    runAsGroup: {{ current_site_item.uid }}
    fsGroup: {{ current_site_item.fs_group }}
  containers:
  - name: {{ current_site_item.name }}-apy
    image: "{{ combined_otvl.otvl_web_v4.docker_registry }}/{{ combined_otvl.otvl_web_v4.cabri_sched_image }}"
    command: ["/bin/sh"]
    args: ["-c", "/entrypoint.sh /usr/local/bin/cabri schedule --pfile /etc/cabri-pfile --sfile /etc/cabri-sfile.yaml --http --address :{{ current_site_item.api_sync_port }} --haslog"]
    ports:
      - containerPort: {{ current_site_item.api_sync_port }}
        name: {{ current_site_item.name }}-py
    volumeMounts:
      - name: "{{ current_site_item.name }}-api-vol"
        mountPath: /data
      - name: "{{ current_site_item.name }}-api-vsf"
        mountPath: /etc/cabri-sfile.yaml
  - name: {{ current_site_item.name }}-api
    image: "{{ combined_otvl.otvl_web_v4.docker_registry }}/{{ current_site_item.images.api }}:{{ current_site_item.tags.api }}"
    env:
      - name: OTVL_WEB_CONFIG_PATH
        value: "{{ current_site_item.api_conf }}"
    command: ["/bin/sh"]
    args: ["-c", "/entrypoint.sh /srv/pkg/otvl_web_server_venv/bin/python -m otvl_web.main"]
    ports:
      - containerPort: {{ current_site_item.api_port }}
        name: {{ current_site_item.name }}-pi
    volumeMounts:
        - name: "{{ current_site_item.name }}-api-vol"
          mountPath: /data

  volumes:
    - name: "{{ current_site_item.name }}-api-vol"
      persistentVolumeClaim:
        claimName: "{{ current_site_item.name }}-api-pvc"
    - name: "{{ current_site_item.name }}-api-vsf"
      hostPath:
        path: "/srv/data/pods-cf/cabri-sfile-api-{{ current_site_item.name }}.yaml"
        type: File

  restartPolicy: OnFailure

---
apiVersion: v1
kind: Service
metadata:
  name: {{ current_site_item.name }}-api
spec:
  selector:
    app.kubernetes.io/name: {{ current_site_item.name }}-lapi
  ports:
    - name: {{ current_site_item.name }}-pysp
      protocol: TCP
      port: {{ current_site_item.api_sync_port }}
      targetPort: {{ current_site_item.name }}-py
    - name: {{ current_site_item.name }}-pisp
      protocol: TCP
      port: {{ current_site_item.api_port }}
      targetPort: {{ current_site_item.name }}-pi

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ current_site_item.name }}-api-sync
  namespace: default
spec:
  routes:
    - kind: Rule
      match: "Host(`{{ current_site_item.ingress_host }}`) && PathPrefix(`/sync`)"
      services:
        - name:  {{ current_site_item.name }}-api
          port: {{ current_site_item.api_sync_port }}
      middlewares:
        - name: mwrmsync
    - kind: Rule
      match: "Host(`{{ current_site_item.ingress_host }}`) && PathPrefix(`/api`)"
      services:
        - name:  {{ current_site_item.name }}-api
          port: {{ current_site_item.api_port }}

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: mwrmsync
  namespace: default
spec:
  stripPrefix:
    prefixes:
      - /sync
